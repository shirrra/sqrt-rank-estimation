S <- rWishart(1,n,Sigma)
S <- S[,,1]/n
ell <- eigen(S,TRUE,TRUE)$values
k_hat <- kEst(ell)
if (k_hat == k) {count <- count+1}
}
frac[i_P] <- count/iter
}
set.seed(26580)
P <- 2^(5:10)
lam <- c(10,4)
k <- length(lam)
max_k <- 10
iter <- 3
frac <- rep(0,length(P))
for (i_P in 1:length(P)) {
p <- P[i_P]
print(paste("p=",p))
n <- p
count <- 0
for (i_iter in 1:iter) {
Sigma <- diag(c(lam, rep(0,p-k)) + runif(p,0.5,1.5))
S <- rWishart(1,n,Sigma)
S <- S[,,1]/n
ell <- eigen(S,TRUE,TRUE)$values
k_hat <- kEst(ell)
if (k_hat == k) {count <- count+1}
}
frac[i_P] <- count/iter
}
set.seed(26580)
P <- 2^(5:8)
lam <- c(10,4)
k <- length(lam)
max_k <- 10
iter <- 10
frac <- rep(0,length(P))
for (i_P in 1:length(P)) {
p <- P[i_P]
print(paste("p=",p))
n <- p
count <- 0
for (i_iter in 1:iter) {
Sigma <- diag(c(lam, rep(0,p-k)) + runif(p,0.5,1.5))
S <- rWishart(1,n,Sigma)
S <- S[,,1]/n
ell <- eigen(S,TRUE,TRUE)$values
k_hat <- kEst(ell)
if (k_hat == k) {count <- count+1}
}
frac[i_P] <- count/iter
}
plot(log(P,2), frac, ylim=c(0,1), pch=16, main="Prob. of Estimating k Correctly as a Function of p", xlab="P", ylab="Pr(k_hat=k)")
abline(1, 0, col="red", lwd=3)
iter <- 100
frac <- rep(0,length(P))
for (i_P in 1:length(P)) {
p <- P[i_P]
print(paste("p=",p))
n <- p
count <- 0
for (i_iter in 1:iter) {
Sigma <- diag(c(lam, rep(0,p-k)) + runif(p,0.5,1.5))
S <- rWishart(1,n,Sigma)
S <- S[,,1]/n
ell <- eigen(S,TRUE,TRUE)$values
k_hat <- kEst(ell)
if (k_hat == k) {count <- count+1}
}
frac[i_P] <- count/iter
}
set.seed(26580)
P <- 2^(5:8)
lam <- c(10,4)
k <- length(lam)
max_k <- 10
iter <- 100
frac <- rep(0,length(P))
for (i_P in 1:length(P)) {
p <- P[i_P]
print(paste("p=",p))
n <- p
count <- 0
for (i_iter in 1:iter) {
print(paste("i=",i))
Sigma <- diag(c(lam, rep(0,p-k)) + runif(p,0.5,1.5))
S <- rWishart(1,n,Sigma)
S <- S[,,1]/n
ell <- eigen(S,TRUE,TRUE)$values
k_hat <- kEst(ell)
if (k_hat == k) {count <- count+1}
}
frac[i_P] <- count/iter
}
set.seed(26580)
P <- 2^(5:8)
lam <- c(10,4)
k <- length(lam)
max_k <- 10
iter <- 100
frac <- rep(0,length(P))
for (i_P in 1:length(P)) {
p <- P[i_P]
print(paste("p=",p))
n <- p
count <- 0
for (i_iter in 1:iter) {
print(paste("p=",p))
print(paste("i=",i))
Sigma <- diag(c(lam, rep(0,p-k)) + runif(p,0.5,1.5))
S <- rWishart(1,n,Sigma)
S <- S[,,1]/n
ell <- eigen(S,TRUE,TRUE)$values
k_hat <- kEst(ell)
if (k_hat == k) {count <- count+1}
}
frac[i_P] <- count/iter
}
plot(x,y)
set.seed(26580)
P <- 2^(5:8)
lam <- c(10,4)
k <- length(lam)
max_k <- 10
iter <- 100
frac <- rep(0,length(P))
for (i_P in 1:length(P)) {
p <- P[i_P]
print(paste("p=",p))
n <- p
count <- 0
for (i_iter in 1:iter) {
print(paste("p=",p))
print(paste("i=",i))
Sigma <- diag(c(lam, rep(0,p-k)) + runif(p,0.5,1.5))
S <- rWishart(1,n,Sigma)
S <- S[,,1]/n
ell <- eigen(S,TRUE,TRUE)$values
k_hat <- kEst(ell)
if (k_hat == k) {count <- count+1}
}
frac[i_P] <- count/iter
}
formula
x
plot(x,y)
source('~/phd/findRank/temp.R', echo=TRUE)
source('~/phd/findRank/temp.R', echo=TRUE)
source('~/phd/findRank/temp.R', echo=TRUE)
source('~/phd/findRank/temp.R', echo=TRUE)
plot(ell)
ell[1:10]
ell[6:7]
plot(ell[1:10])
q<-6
i <- p - which.max(ell[p:1]>0) + 1 #index of the last non-zero value at ell
range <- (ell[q+1] - ell[i]) / d #we want to consider a range which is 1/d from the total range of eigenvalues
j <- which.min(ell > (ell[q+1]-range)) #we want to take eigenvalues that are between ell[q+1] and ell[q+1]+range
# we should take ell from (q+1) to j
if (j < q+10) {j <- q+10} #we want to use at least 10 eigenvalues
x <- ell[(q+1):j]
u <- ((p-q):(p-j+1))/(p)
y <- (1-u)^(2/3)
l <- (ell[q+1] + ell[q+2]) / 2
if (q==0) {
L <- Inf
} else {
L <- (ell[q] + ell[q+1]) / 2
}
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=x[1], b=-(y[1]-y[2])/(x[1]-x[2])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
plot(x,y)
lm(x~y)
x[1]
l
L
abline(4.235,-7.245)
abline(-7.245,4.235)
lm(y~x)
abline(0.5722,-0.1337)
a<--0.1337
b<-0.5722
-b/a
l
L
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=x[1], b=-(y[1]-y[2])/(x[1]-x[2])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
?nls
source('~/phd/findRank/temp.R', echo=TRUE)
source('~/phd/findRank/temp.R', echo=TRUE)
source('~/phd/findRank/temp.R', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
source('~/phd/findRank/temp.R', echo=TRUE)
p
n
i_P
i_iter
plot(ell)
p <- length(ell)
m <- min(ell[ell>0]) # smallest non-zero eigenvalue
range <- (ell[q+1] - m) / d #we want to consider a range which is 1/d from the total range of eigenvalues
k_max<-10
mse <- rep(0,k_max+1)
for (q in 0:max_k) {
mse[q+1] <- sqrtFitMSE(q, ell)
}
q
p <- length(ell)
m <- min(ell[ell>0]) # smallest non-zero eigenvalue
range <- (ell[q+1] - m) / d #we want to consider a range which is 1/d from the total range of eigenvalues
j <- which.min(ell > (ell[q+1]-range)) #we want to take eigenvalues that are between ell[q+1] and ell[q+1]+range
# we should take ell from (q+1) to j
if (j < q+10) {j <- q+10} #we want to use at least 10 eigenvalues
x <- ell[(q+1):j]
u <- ((p-q):(p-j+1))/(p)
y <- (1-u)^(2/3)
l <- (ell[q+1] + ell[q+2]) / 2
if (q==0) {
L <- Inf
} else {
L <- (ell[q] + ell[q+1]) / 2
}
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[2])/(x[1]-x[2])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
plot(x,y)
lm(x,y)
lm(y~x)
l
L
(y[1]-y[2])/(x[1]-x[2])
0.4976/0.1152
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[2])/(x[1]-x[2])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
(y[1]-y[2])/(x[1]-x[2])
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=(y[1]-y[2])/(x[1]-x[2])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
(y[1]-y[2])/(x[1]-x[2]))
(y[1]-y[2])/(x[1]-x[2])
x[1:2]
y[1:2]
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
#                              start=c(lm=l, b=-(y[1]-y[2])/(x[1]-x[2])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
constrainedFit
l
L
abline(4.1358*0.1825,-0.1825)
source('~/phd/findRank/temp.R', echo=TRUE)
×¤
p
i_iter
plot(ell)
p <- length(ell)
m <- min(ell[ell>0]) # smallest non-zero eigenvalue
range <- (ell[q+1] - m) / d #we want to consider a range which is 1/d from the total range of eigenvalues
j <- which.min(ell > (ell[q+1]-range)) #we want to take eigenvalues that are between ell[q+1] and ell[q+1]+range
# we should take ell from (q+1) to j
if (j < q+10) {j <- q+10} #we want to use at least 10 eigenvalues
x <- ell[(q+1):j]
u <- ((p-q):(p-j+1))/(p)
y <- (1-u)^(2/3)
l <- (ell[q+1] + ell[q+2]) / 2
if (q==0) {
L <- Inf
} else {
L <- (ell[q] + ell[q+1]) / 2
}
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
plot(x,y)
source('~/phd/findRank/temp.R', echo=TRUE)
p <- length(ell)
m <- min(ell[ell>0]) # smallest non-zero eigenvalue
range <- (ell[q+1] - m) / d #we want to consider a range which is 1/d from the total range of eigenvalues
j <- which.min(ell > (ell[q+1]-range)) #we want to take eigenvalues that are between ell[q+1] and ell[q+1]+range
# we should take ell from (q+1) to j
if (j < q+10) {j <- q+10} #we want to use at least 10 eigenvalues
x <- ell[(q+1):j]
u <- ((p-q):(p-j+1))/(p)
y <- (1-u)^(2/3)
l <- (ell[q+1] + ell[q+2]) / 2
if (q==0) {
L <- Inf
} else {
L <- (ell[q] + ell[q+1]) / 2
}
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
q
mse <- rep(0,k_max+1)
for (q in 0:max_k) {
mse[q+1] <- sqrtFitMSE(q, ell)
}
q
p <- length(ell)
m <- min(ell[ell>0]) # smallest non-zero eigenvalue
range <- (ell[q+1] - m) / d #we want to consider a range which is 1/d from the total range of eigenvalues
j <- which.min(ell > (ell[q+1]-range)) #we want to take eigenvalues that are between ell[q+1] and ell[q+1]+range
# we should take ell from (q+1) to j
if (j < q+10) {j <- q+10} #we want to use at least 10 eigenvalues
x <- ell[(q+1):j]
u <- ((p-q):(p-j+1))/(p)
y <- (1-u)^(2/3)
l <- (ell[q+1] + ell[q+2]) / 2
if (q==0) {
L <- Inf
} else {
L <- (ell[q] + ell[q+1]) / 2
}
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
plot(x,y)
(y[1]-y[length(y)])/(x[1]-x[length(y)])
lm(y~x)
0.6213/0.1452
l
L
?nls
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
nls.control(warnOnly=T)
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf)
)
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf),
nls.control(warnOnly=T)
)
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf),
nls.control(warnOnly=T)
)
constrainedFit <- nls(y ~ b*(lm-x), algorithm="port",
start=c(lm=l, b=-(y[1]-y[length(y)])/(x[1]-x[length(y)])),
lower=c(lm=l,b=0),
upper=c(lm=L,b=Inf),
)
l
L
constrainedFit <- lm(y ~ x)
mean(resid(constrainedFit)^2)
constrainedFit
constrainedFit$coefficients
constrainedFit$coefficients["x"]
constrainedFit$coefficients["Intercept"]
constrainedFit$coefficients["(Intercept)"]
constrainedFit$coefficients[1]
constrainedFit$coefficients[["Intercept"]]
constrainedFit$coefficients[["(Intercept)"]]
constrainedFit <- lm(y ~ x)
lm <- constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
lm
lm <- -constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
lm
l
L
mean(resid(constrainedFit)^2)
constrainedFit <- lm(y ~ x)
lm <- -constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
b0 <- -constrainedFit$coefficients[["x"]]
if (lm < l) {
constrainedFit <- nls(y ~ b*(l-x), algorithm="port",
start=c(b=b0,
)
} else if (lm > L) {
constrainedFit <- nls(y ~ b*(L-x), algorithm="port",
constrainedFit <- lm(y ~ x)
lm <- -constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
b0 <- -constrainedFit$coefficients[["x"]]
constrainedFit <- lm(y ~ x)
lm <- -constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
b0 <- -constrainedFit$coefficients[["x"]]
if (lm < l) {
constrainedFit <- nls(y ~ b*(l-x), algorithm="port",
start=c(b=b0,
)
} else if (lm > L) {
if (3>2) {
aa<-2
} else {
aa<-5
}
aa
if (3<2) {
aa<-2
} else {
aa<-5
}
aa
constrainedFit <- lm(y ~ x)
lm <- -constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
b0 <- -constrainedFit$coefficients[["x"]]
if (lm < l) {
constrainedFit <- nls(y ~ b*(l-x), algorithm="port",
start=b0
)
} else if (lm > L) {
constrainedFit <- nls(y ~ b*(L-x), algorithm="port",
start=b0
)
}
l
L
constrainedFit <- lm(y ~ x)
lm <- -constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
b0 <- -constrainedFit$coefficients[["x"]]
lm
l
L
constrainedFit <- nls(y ~ b*(L-x), algorithm="port",
start=b0
)
constrainedFit <- nls(y ~ b*(L-x), algorithm="port",
start=c(b0)
)
constrainedFit <- nls(y ~ b*(L-x), algorithm="port",
start=c(b=b0)
)
constrainedFit <- lm(y ~ x)
lm <- -constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
b0 <- -constrainedFit$coefficients[["x"]]
if (lm < l) {
constrainedFit <- nls(y ~ b*(l-x), algorithm="port",
start=c(b=b0)
)
} else if (lm > L) {
constrainedFit <- nls(y ~ b*(L-x), algorithm="port",
start=c(b=b0)
)
}
mean(resid(constrainedFit)^2)
source('~/phd/findRank/temp.R')
p
i_iter
mse <- rep(0,k_max+1)
for (q in 0:max_k) {
mse[q+1] <- sqrtFitMSE(q, ell)
}
q
p <- length(ell)
m <- min(ell[ell>0]) # smallest non-zero eigenvalue
range <- (ell[q+1] - m) / d #we want to consider a range which is 1/d from the total range of eigenvalues
j <- which.min(ell > (ell[q+1]-range)) #we want to take eigenvalues that are between ell[q+1] and ell[q+1]+range
# we should take ell from (q+1) to j
if (j < q+10) {j <- q+10} #we want to use at least 10 eigenvalues
x <- ell[(q+1):j]
u <- ((p-q):(p-j+1))/(p)
y <- (1-u)^(2/3)
l <- (ell[q+1] + ell[q+2]) / 2
if (q==0) {
L <- Inf
} else {
L <- (ell[q] + ell[q+1]) / 2
}
constrainedFit <- lm(y ~ x)
plot(x,y)
lm(y~x)
constrainedFit <- lm(y ~ x)
lm <- -constrainedFit$coefficients[["(Intercept)"]] / constrainedFit$coefficients[["x"]]
b0 <- -constrainedFit$coefficients[["x"]]
lm
l
L
constrainedFit <- nls(y ~ b*(L-x), algorithm="port",
start=c(b=b0)
)
source('~/phd/findRank/temp.R')
source('~/phd/findRank/temp.R')
source('~/phd/findRank/temp.R', echo=TRUE)
source('~/phd/findRank/temp.R')
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
